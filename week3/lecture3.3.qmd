---
title: "Lecture 3.3"
format: html
editor: visual
---

# Lecture 3 Part 3

## 3.3 Visualizing Evolution

```{r}
# ..........................setup..........................
# load packages ----
library(chron) # for working with dates / times
library(naniar) # tools for exploring & handing missing data
library(tidytuesdayR) # used to download TidyTuesday data
library(tidycensus) # an R package that allows users to interface with a select number of the US Census Bureauâ€™s data APIs and return tidyverse-ready data frames
library(ggridges) # {ggplot2} extension for creating ridgeline plots
library(gghighlight) # {ggplot2} extension for highlighting geoms
library(ggbeeswarm) # {ggplot2} extension for creating categorical scatter (violin point) plots
library(see) # {ggplot2} extension for model visualization (we'll be using it for it's geom, geom_violindot())
library(scales)
library(janitor)
library(tidyverse)

# add API key for census data ----
source(here::here("week3", "keys.R"))
census_api_key(censusKEY)

# read-in data ----
lyme <- read_csv(here::here("week3", "data", "LD-Case-Counts-by-County-01-20.csv"))
```

```{r}
# ..........................wrangle..........................
# lyme data ----
lyme_clean <- lyme |> 
  clean_names() |> 
  rename(county = ctyname, state = stname, status = ststatus) |> 
  pivot_longer(cols = 6:25,
               names_to = "city_year",
               values_to = "reported_cases") |> 
  mutate(year = str_remove(city_year, pattern = "cases"),
         year = as.factor(year))

# calculate total cases per state
lyme_by_state <- lyme_clean |> 
  group_by(year, state) |> 
  summarise(total_cases = sum(reported_cases))

# get state populations
us_state_pop <- get_estimates(geography = "state", 
                              product = "population",
                              year = 2019) |> 
  filter(variable == "POP") |> 
  # select name and value and rename at the same time
  select(state = NAME, population = value)

#........................write data to csv.......................
# optional, but recommended in case you want to work offline, the API is down, etc. (you can then read in your saved data file rather than run the above code)
write_csv(us_state_pop, file = here::here("week3", "data", "us_state_pop.csv"))

# join lyme and population data
lyme_pop <- left_join(lyme_by_state, us_state_pop) |> 
  # add col with num of 100k people per state ----
  mutate(pop100k = population/100000) |> 
  # calculate num cases per 100k people (common way of reporting disease incidence) ----
  mutate(cases_per100k = total_cases/pop100k) 
```

```{r}

lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) + 
  geom_line()

lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) + 
  geom_line() +
  geom_point()

# highlight 1 group ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) + 
  geom_line() +
  gghighlight::gghighlight(state == "New Jersey")

# highlight a conditional statement ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) + 
  geom_line() +
  gghighlight::gghighlight(max(cases_per100k)>100)

# default
lyme_pop |> 
  filter(year %in% c(2013:2019)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line()

# with cutting y-axis
lyme_pop |> 
  filter(year %in% c(2013:2019)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  scale_y_continuous(limits = c(0, NA))
```

Aspect Ratio

-   steeper lines are thought of as more important

-   wider lines are more shallow slopes

```{r}
# ggplot with default aspect ratio ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line()

# as a tool add breaks to every 1 unit increase; shows that our x-units are wide and are y-units are narrow ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  scale_y_continuous(breaks = seq(0, 190, by = 1)) 

# this represents an aspect ratio of 1 ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  scale_y_continuous(breaks = seq(0, 190, by = 1)) +
  coord_fixed(ratio = 1)

# this represents an aspect ratio of 1/50 aka y/x ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  # scale_y_continuous(breaks = seq(0, 190, by = 1)) +
  coord_fixed(ratio = 1/50)
```

Area charts

-   line graph with everything filled in underneath it

-   does not actually calculate area

-   Stacked area charts are useful for showing the evolution of a whole and the relative proportions of each group that make up the whole

-   Proportional stacked area charts **plot percentage contribution instead of absolute numbers on the y-axis**. The focus of this version is the proportion of contribution made by each category rather than absolute numbers.

```{r}
# area chart 1 group ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Montana") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_area() 

# area chart with updated fill color ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Montana") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area() +
  scale_fill_manual(values = c("#047C90")) +
  # remove legend
  theme(legend.position = "none")

# area chart expanded to margins ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Montana") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area() +
  scale_fill_manual(values = c("#047C90")) +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  theme(legend.position = "none")

# stacked area chart ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area()

# proportional stacked area chart ----
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area(position = "fill") +
  scale_y_continuous(labels = scales::label_percent(scale = 100))

```
