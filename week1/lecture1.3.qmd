---
title: "Lecture 1.3"
date: 2024-01-08
editor_options: 
  chunk_output_type: console
---

## Load Packages

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Tidy data

```{r}
# untidy data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)
```

This data is untidy because station is a variable and it is being used as a column therefore each row has multiple observations instead of each row containing 1 observation.

We can think of this as wanting a column that can be x and a column that can be y.

```{r}
# make tidy ----
temp_data_long <- temp_data_wide |>  
  pivot_longer(cols = starts_with("station"), #pull from these columns
               names_to = "station_id", #create new column named station-id
               values_to = "temp_c") #create column where values are going
```

## Plot 1
```{r}
# general data exploration
# view(penguins)
str(penguins)
unique(penguins$species)
```

```{r}
# mapping color globally ----
ggplot(data = penguins, 
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm, color = species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  scale_color_manual(values = c("darkorange", "purple", "cyan4"))

#mapping color locally ----
ggplot(data = penguins, 
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm)) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm")

# piping into a ggplot ----
#penguins |> 
  # ggplot(aes(x = bill_length_mm,
  #                    y = bill_depth_mm))

# ggplot() +
#   geom_point(data = penguins, 
#               mapping = aes(x = bill_length_mm,
#                      y = bill_depth_mm))
```

```{r}
# assinging color scale
ggplot(penguins, aes(x = body_mass_g,
                     y = flipper_length_mm,
                     color = body_mass_g)) +
  geom_point() +
  scale_color_gradient(low = "#132B43", high = "#F7DD4C")
```
 
 ## Plot 2
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar()
```
 
Overriding geom_bar's stat:
```{r}
penguins_summary <- penguins |> 
  count(species)

ggplot(penguins_summary, aes(x = species, y = n)) +
  geom_bar(stat = "identity")
```

Overriding default stat mapping
```{r}
ggplot(penguins, aes(x = species,
                     y = after_stat(prop),
                     group = 1)) +
  geom_bar()
```

position adjustments 
```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
```

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "dodge")
```

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = position_dodge2(preserve = "single"))
```

coordinate systems
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_polar()
```

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_flip() +
  theme_classic() +
  theme(
    axis.title = element_text(size = 17, color = "purple")
  )
```
